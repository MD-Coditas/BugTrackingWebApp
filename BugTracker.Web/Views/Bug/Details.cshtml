@model BugDto
@using System.Reflection
@using System.ComponentModel.DataAnnotations
@inject IHttpContextAccessor HttpContextAccessor

@{
    ViewData["Title"] = "Bug Details";
}
@{
    Context.Response.Headers["Cache-Control"] = "no-cache, no-store, must-revalidate";
    Context.Response.Headers["Pragma"] = "no-cache";
    Context.Response.Headers["Expires"] = "0";
}


<div class="container mt-5">
    <h2 class="mb-4">Bug Details</h2>

    <dl class="row">
        <dt class="col-sm-3">Title</dt>
        <dd class="col-sm-9">@Model.Title</dd>

        <dt class="col-sm-3">Description</dt>
        <dd class="col-sm-9">@Model.Description</dd>

        <dt class="col-sm-3">Priority</dt>
        <dd class="col-sm-9">@Model.Priority</dd>

        <dt class="col-sm-3">Status</dt>
        <dd class="col-sm-9">@Model.Status</dd>

        <dt class="col-sm-3">Created</dt>
        <dd class="col-sm-9">@Model.CreatedAt.ToString("f")</dd>

        @if (!string.IsNullOrEmpty(Model.ScreenshotPath))
        {
            <dt class="col-sm-3">Screenshot</dt>
            <dd class="col-sm-9">
                <img src="@Model.ScreenshotPath" alt="Screenshot" class="img-fluid border" style="max-width: 400px;" />
            </dd>
        }
    </dl>

    @using System.Security.Claims
    @inject IHttpContextAccessor HttpContextAccessor

    @{
        var userRole = HttpContextAccessor.HttpContext?.User?.FindFirst(ClaimTypes.Role)?.Value;
        var isAdmin = userRole == "Admin";
    }

    @if (isAdmin)
    {
        <div class="mt-4">
            <button type="button" class="btn btn-warning" data-bs-toggle="modal" data-bs-target="#statusModal">
                Update Status
            </button>
        </div>

        <!-- Status Update Modal -->
        <div class="modal fade" id="statusModal" tabindex="-1" aria-labelledby="statusModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <form asp-controller="Admin" asp-action="UpdateStatus" method="post">
                        <div class="modal-header">
                            <h5 class="modal-title" id="statusModalLabel">Update Bug Status</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <input type="hidden" name="id" value="@Model.Id" />
                            <div class="form-group mb-3">
                                <label for="status" class="form-label">Select Status</label>
                                <select name="status" class="form-select">
                                    @foreach (var status in Enum.GetValues(typeof(BugTracker.Application.Enums.Status)).Cast<BugTracker.Application.Enums.Status>())
                                    {
                                        var display = status.GetType().GetMember(status.ToString())[0]
                                        .GetCustomAttribute<System.ComponentModel.DataAnnotations.DisplayAttribute>()?.Name ?? status.ToString();

                                        <option value="@display" selected="@(Model.Status == display ? "selected" : null)">
                                            @display
                                        </option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="submit" class="btn btn-primary">Update</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    }


    <hr />
    <h4>Comments</h4>

    <form asp-action="PostComment" method="post">
        <input type="hidden" name="bugId" value="@ViewBag.BugId" />
        <div class="mb-2">
            <textarea name="message" class="form-control" placeholder="Add a comment..." required></textarea>
        </div>
        <button type="submit" class="btn btn-sm btn-primary">Post Comment</button>
    </form>

    <br />

    @foreach (var comment in (IEnumerable<CommentDto>)ViewBag.Comments)
    {
        <div class="border rounded p-2 mb-2">
            <strong>@comment.UserName</strong> <small class="text-muted">@comment.CreatedAt.ToString("g")</small>
            <p class="mb-0">@comment.Message</p>
        </div>
    }

</div>
